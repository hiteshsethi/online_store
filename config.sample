import os

IS_PROD_ENV = False
API_PREFIX_V1 = "/api/v1"

BASE_DIR = os.path.abspath(os.path.dirname(__file__))

LOGGER_PATH = BASE_DIR + "/logs"
TEST_SERVER_HOST = "0.0.0.0"
TEST_SERVER_PORT = 5000
ERROR_MAIL_LIST = ['hitesh.28jan@gmail.com']


class FlaskConfig(object):
    SQLALCHEMY_DATABASE_URI = 'mysql://root:@localhost/online_store'
    SQLALCHEMY_POOL_TIMEOUT = 50
    SQLALCHEMY_POOL_SIZE = 10
    SQLALCHEMY_POOL_RECYCLE = 3600
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    REDIS_HOST = 'localhost'
    REDIS_PORT = 6379
    REDIS_DB = 0
    SWAGGER = {
        "swagger": "2.0",
        "info": {
            "title": "Online Store Backend Api's",
            "description": """RESTful APIs for an online store which can be used to manage different products\n
            Assumptions:
                1) Only authentication is considered, not authorisation
                2) "It should support addition, deletion, editing and searching a product", main focus of mine was on this only, hence signup is provided just for authentication purpose
                3) Refering to point 2, authentication is implemented via Basic Auth.
                4) Products are considered to be in reasonable number, and client is responsible for managing the response. Hence no pagination is provided.

            \n
            Workflow:
                1) To add a product, first add a relevant category

            """,
            "contact": {
                "email": "hitesh.28jan@gmail.com"
            },
            "version": "1.0",
            "licence": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }

        },
        "schemes": [
            "http"
        ],
        "tags": [
            {
                "name": "product",
                "description": "all api's related to product"
            }
        ]

    }
